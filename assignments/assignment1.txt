Quin Thames
CMSI 402
Assignment 1
http://myweb.lmu.edu/bjohnson/cmsi402web/assignmt1.html

Problem 1.3, Kung page 15
Should optimization be a focus of software engineering? Briefly explain, and justify your answer with a practical example.

A: Optimization should not be a focus of software engineering because software engineering focuses on PQCT (productivity, quality, cost, and time to market).  While an optimal solution would contribute to the quality of a solution, it would most likely take away from the other 3 requirements.  Most of the time a software engineer will find a solution that is not entirely optimal but is satisfactory for the required task and is much cheaper and faster to market.  For example, the optimal solution for a solving an algorithm might take 0.1 seconds but there might also be a 0.5 seconds solution that was much easier/faster to find and sufficiently meets the desired requirements.


Problem 1.4, Kung page 15
Identify three computer science courses of your choice. Show the usefulness of these courses in the software life-cycle activities.

A: The the tracks of the software life-cycle activities are the software development process, software quality assurance, and software project management.  One class that plays a role in the software development process is data structures and algorithms because it helps with the design of the software and how the problems are solved.  Software quality assurance is focused on the interaction design because a large emphasis is placed on user feedback and testing existing software.  Finally, project management was focused on in 401 because the project was on a much larger scale than projects in previous classes and because there were a number of people working on the project.  This required a lot of management and organization to get everyone to work together.


Problem 1.6, Kung page 15
What are the differences and relationships between OO software engineering and conventional software engineering? Discuss whether object-oriented software engineering will replace conventional software engineering.

Object oriented engineering (OOSE) is a type of software engineering that views software systems as a composition of objects.  Everything is broken up into objects that each have states and methods.  In conventional software engineering like procedural software engineering, instead of a system being broken up into objects, it is broken up into small digestible subroutines that only carry out a few actions.  Both are methods of breaking up a larger project or problem into easier to understand sub sections.  Both are valid ways to simplify a program and can actually have some overlap (a method of an object in OOSE can be very similar to a subroutine in procedural SE), it mainly depends on the programmer's preference and what seems to work best given the certain project.  OOSE will not replace conventional software engineering because different types of projects/problems lend themselves to work better with different specific types of software engineering.


Problem 2.1, Kung page 51
What are the similarities and differences between the conventional waterfall model and the Unified Process model? Identify and explain three advantages and three disadvantages of each of these two models. 

The waterfall process creates a linear structure of several stages of a project like requirements, design, implementation, testing, and maintenance, where each stage needs to be completed before the next stage can begin.
Disadvantages to this method include that it needs all requirements to be defined up front (Big Up Front Requirements BUFP) which can slow down the initial process.  It also is not able to respond well to changing requirements because of its strict structure and up front planning and it also does not allow users to experiment with the product until it is fully released to give feedback.  The advantages to the waterfall model are that the linear structure greatly simplifies the project planning, the segregated phases allows for easy partitioning of work on a project among different teams in a business (each team can specialize in a single phase), and the structured requirements allows for rigorous and effectively testing of the product.
The unified process model consists of a series of cycles grouped into 4 phases (inception, elaboration, construction, and transition) where each cycle results in a release of a version of the system.  Disadvantages to the unified process model include a lack of requirements leading to a lack of testing clarity because the requirements are being finalized and adjusted and the project goes on.  Because the project is changing and constantly rereleased, the UP model may take a longer time to get a final release than the waterfall method, and there is less structure which can lead to more complicated in-depth project planning.  












